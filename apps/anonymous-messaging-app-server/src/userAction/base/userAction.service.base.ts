/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserAction as PrismaUserAction,
  User as PrismaUser,
} from "@prisma/client";
import { UserActionInputDto } from "../UserActionInputDto";

export class UserActionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserActionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userAction.count(args);
  }

  async userActions(
    args: Prisma.UserActionFindManyArgs
  ): Promise<PrismaUserAction[]> {
    return this.prisma.userAction.findMany(args);
  }
  async userAction(
    args: Prisma.UserActionFindUniqueArgs
  ): Promise<PrismaUserAction | null> {
    return this.prisma.userAction.findUnique(args);
  }
  async createUserAction(
    args: Prisma.UserActionCreateArgs
  ): Promise<PrismaUserAction> {
    return this.prisma.userAction.create(args);
  }
  async updateUserAction(
    args: Prisma.UserActionUpdateArgs
  ): Promise<PrismaUserAction> {
    return this.prisma.userAction.update(args);
  }
  async deleteUserAction(
    args: Prisma.UserActionDeleteArgs
  ): Promise<PrismaUserAction> {
    return this.prisma.userAction.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userAction
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async BlockUser(args: UserActionInputDto): Promise<UserActionInputDto> {
    throw new Error("Not implemented");
  }
  async IgnoreUser(args: UserActionInputDto): Promise<UserActionInputDto> {
    throw new Error("Not implemented");
  }
  async ReportUser(args: UserActionInputDto): Promise<UserActionInputDto> {
    throw new Error("Not implemented");
  }
}
